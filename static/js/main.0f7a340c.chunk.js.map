{"version":3,"sources":["components/TrashItem.js","components/Header.js","components/Todo.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["TrashItem","props","className","elem","task","onClick","del","id","restore","Header","useState","value","setValue","type","onChange","event","target","placeholder","addNote","data-toggle","data-target","aria-expanded","aria-controls","trashList","map","el","key","removeFromTresh","restoreItem","Todo","isDone","done","style","backgroundColor","updateCheck","color","textDecoration","delItem","List","notes","checked","App","initList","uuid4","setNotes","setTrashList","newList","push","newTrashList","filter","restoredItem","newTrash","unshift","tempList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f7a340c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction TrashItem(props){\r\n\r\n return (\r\n    <li> <span className=\"trash-list\">{props.elem.task}</span>\r\n\r\n     <button onClick={()=> props.del(props.elem.id)} \r\n             className=\"btn btn-secondary remove_from_bin\">\r\n             <i className=\"fa fa-trash\"></i></button> \r\n   \r\n     <button onClick={()=> props.restore(props.elem.id)} \r\n             className=\"btn btn-primary btn-sm restore-button\">restore</button>\r\n       <hr />\r\n </li>\r\n );\r\n\r\n}\r\n\r\nexport default TrashItem;","import React, {useState} from \"react\";\r\nimport TrashItem from \"./TrashItem\";\r\n\r\n\r\nfunction Header(props){\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    const inputHandler = (event)=>{\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    const addButtonHandler = ()=> {\r\n        props.addNote(value);\r\n        setValue('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"header\">\r\n                <input className=\"input-class\" type=\"text\" onChange={inputHandler}\r\n                       placeholder=\"add todo\" value={value}/>\r\n\r\n                <button onClick={addButtonHandler}>add item</button>\r\n\r\n                <button className=\"btn-warning trash-bin\" type=\"button\" \r\n                       data-toggle=\"collapse\" data-target=\"#collapseExample\" \r\n                       aria-expanded=\"false\" aria-controls=\"collapseExample\">\r\n                       <i className=\"fa fa-trash\"></i> Trash</button>\r\n\r\n                     <div className=\"collapse\" id=\"collapseExample\">\r\n                     <div className=\"card card-body collapse-div\">\r\n\r\n                      <h4>Deleted items:</h4> \r\n                      <hr/>\r\n                      <ul>\r\n                     {props.trashList.map(el => <TrashItem \r\n                         key={el.id}\r\n                         elem={el}\r\n                         del={props.removeFromTresh}\r\n                         restore={props.restoreItem}\r\n                     />)}\r\n                        </ul>\r\n                    </div>\r\n             </div>  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nfunction Todo(props){\r\n    const isDone = props.done; // false\r\n    \r\n     const checkedStyle = {\r\n         color: \"red\",\r\n         textDecoration: 'line-through',\r\n     }\r\n\r\n     const uncheckedStyle = {\r\n        color: \"#50a3a2ue\",\r\n    }\r\n\r\n    const checkedButtonStyle = {\r\n        backgroundColor: \"hsl(113, 94%, 53%)\",\r\n    }\r\n\r\n    const unCheckedButtonStyle = {\r\n        backgroundColor: \"#8492b1\",\r\n    }\r\n\r\n    return (\r\n        <div className=\"list\">\r\n         <button style={isDone ? checkedButtonStyle : unCheckedButtonStyle} \r\n                 onClick={()=>props.updateCheck(props.id)} className=\"check-button\">âœ”</button>\r\n\r\n         <h2 style={isDone ? checkedStyle : uncheckedStyle}>\r\n             <span style={{color : \"#50a3a2\"}}>{props.task}</span></h2>\r\n\r\n         <button onClick={()=> props.delItem(props.id)} \r\n                 className=\"btn btn-danger del-button\">\r\n                 <i className=\"fa fa-trash\"></i></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction List(props){\r\n   const notes = props.notes;\r\n   const delItem = props.delItem;\r\n\r\n    return (\r\n\r\n       <div >\r\n\r\n       {notes.map(el => <Todo \r\n           key={el.id}\r\n           elem={el}\r\n           task={el.task}\r\n           done={el.checked}\r\n           id={el.id}\r\n           delItem={delItem}\r\n           updateCheck={props.updateCheck}\r\n       />)} \r\n\r\n       </div>\r\n    );\r\n}\r\nexport default List;\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport List from \"./components/List\";\nimport {v4 as uuid4} from 'uuid';\n\n\nfunction App() {\n    //Todo initial list\n    const initList = [{id: uuid4(), task: \"solve the problem\", checked: false},\n    {id: uuid4(), task: \"work hard\", checked: false},\n    {id: uuid4(), task: \"banana\", checked: false},\n    {id: uuid4(), task: \"sleep\", checked: false},\n    {id: uuid4(), task: \"study\", checked: false}\n  ];\n\n    const [notes, setNotes] = useState(initList);\n    const [trashList, setTrashList] = useState([]);\n  \n    //Todo add new item to the list\n    const addNote = (value)=>{\n      let newList = [...notes];\n      newList.push({id: uuid4(), task: value, checked: false});\n      setNotes(newList);\n    }\n\n    //Todo delete item from the list & add to trash\n    const delItem = (id)=>{\n        const newList = notes.filter(el => el.id !== id);\n        const newTrash = notes.filter(el => el.id === id)[0];\n        const tempList = [...trashList];\n        tempList.push(newTrash);\n        setTrashList(tempList);\n        setNotes(newList);\n    }\n\n   //Todo toggle the \"checked property\" to mark the item completed\n    const updateCheck = (id) =>{\n      const newList = notes.map(el =>{\n         if(el.id === id) return {...el, checked: !el.checked};\n         return el;\n       });\n       setNotes(newList)\n    }\n\n    //Todo permanently remove item from trash bin\n    const removeFromTresh = (id) =>{\n      const newTrashList = trashList.filter(el => el.id !== id);\n      setTrashList(newTrashList);\n    }\n\n    //Todo restore item from trash bin to the notes list\n    const restoreItem = (id) =>{\n      const restoredItem = trashList.filter(el => el.id === id)[0];\n      restoredItem.checked = false;\n      const newTrash = trashList.filter(el => el.id !== id);\n      setTrashList(newTrash)\n      const newList = [...notes];\n      newList.unshift(restoredItem);\n      setNotes(newList);\n    }\n\n    return (\n      <div className=\"App\">\n         <Header addNote={addNote} \n                 trashList={trashList}\n                 removeFromTresh={removeFromTresh}\n                 restoreItem={restoreItem}\n              />\n         <hr/>\n\n        <List notes={notes} \n              delItem={delItem} \n              updateCheck={updateCheck}\n            />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}